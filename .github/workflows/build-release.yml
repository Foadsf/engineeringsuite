name: Build and Package Windows Release

on:
  push:
    branches: [ master ] # Optional: Build on pushes to master (creates artifact only)
    tags:
      - 'v*'        # TRIGGER on tags starting with 'v' (e.g., v1.0, v1.0.2)
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: windows-latest # Use a Windows runner

    permissions:
      contents: write # Needed to create/upload releases

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetches all history so tags are available

    - name: Set up JDK 22
      uses: actions/setup-java@v4
      with:
        java-version: '22'
        distribution: 'temurin' # Using Eclipse Temurin distribution

    - name: Compile Java code
      shell: cmd
      run: |
        echo "Creating bin directory..."
        mkdir bin
        echo "Generating sources list..."
        dir /s /b src\*.java > sources.txt
        echo "Compiling..."
        javac -d bin -cp "Dependencies\*" @sources.txt
        if %errorlevel% neq 0 exit /b %errorlevel%
        echo "Compilation successful."

    - name: Create run script
      shell: cmd
      run: |
        echo @echo off > run-esuite.bat
        echo java -cp ".;bin;Dependencies\*" gui.Principal >> run-esuite.bat
        echo pause >> run-esuite.bat

    - name: Package application into ZIP
      shell: powershell
      run: |
        # Extract version from tag or set default
        if ($env:GITHUB_REF -like 'refs/tags/v*') {
          $version = $env:GITHUB_REF -replace 'refs/tags/', ''
        } else {
          $version = "dev-${{ github.run_number }}"
        }
        $assetName = "eSuite-${version}.zip"
        # --- MODIFIED LINE BELOW ---
        Compress-Archive -Path bin, Dependencies, icons, Imagenes, config.txt, examples, lgpl.txt, README.md, termicas.txt, ThermodynamicalProperties.txt, run-esuite.bat -DestinationPath $assetName -Force
        # --- END MODIFIED LINE ---
        echo "ASSET_NAME=$assetName" >> $env:GITHUB_ENV # Share asset name with later steps
        echo "VERSION=$version" >> $env:GITHUB_ENV # Share version with later steps
        echo "Created Application ZIP: $assetName"

    - name: Prepare Chocolatey package source
      shell: powershell
      run: |
        # Create the structure expected by choco pack
        New-Item -Path 'choco-pkg-src' -ItemType Directory -Force
        New-Item -Path 'choco-pkg-src\tools' -ItemType Directory -Force
        # Copy the nuspec and ps1 scripts from the repo (assuming they are in ./chocolatey)
        if (Test-Path -Path 'chocolatey\engineeringsuite.nuspec') {
            Copy-Item -Path 'chocolatey\engineeringsuite.nuspec' -Destination 'choco-pkg-src\'
        } else {
            Write-Error "engineeringsuite.nuspec not found in ./chocolatey directory"
            exit 1
        }
        if (Test-Path -Path 'chocolatey\tools\chocolateyInstall.ps1') {
            Copy-Item -Path 'chocolatey\tools\*' -Destination 'choco-pkg-src\tools\'
        } else {
             Write-Error "Chocolatey install/uninstall scripts not found in ./chocolatey/tools directory"
             exit 1
        }
        # Copy necessary files for embedding (into the package's tools dir)
        # We need the zip, license, and icon (for the shortcut)
        Copy-Item -Path "${{ env.ASSET_NAME }}" -Destination 'choco-pkg-src\tools\' # Copy the already created zip
        Copy-Item -Path 'lgpl.txt' -Destination 'choco-pkg-src\tools\'
        Copy-Item -Path 'icons\logo.png' -Destination 'choco-pkg-src\tools\'
        echo "Chocolatey package source prepared in choco-pkg-src"

    # This step builds the Chocolatey package
    - name: Build Chocolatey Package
      # 'shell' and 'run' are defined only ONCE here for the entire step
      shell: powershell
      run: |
        # --- Determine the version specified IN the nuspec file ---
        # Use PowerShell's XML handling to read the version tag
        [xml]$nuspec = Get-Content -Path "choco-pkg-src\engineeringsuite.nuspec"
        $nuspecVersion = $nuspec.package.metadata.version
        Write-Host "Version found in nuspec: $nuspecVersion"
        # --- End nuspec version determination ---

        # Run choco pack inside the prepared directory
        cd choco-pkg-src
        Write-Host "Running choco pack..."
        choco pack
        # Check if packing succeeded
        if ($LASTEXITCODE -ne 0) {
            Write-Error "choco pack failed!"
            exit 1
        }
        Write-Host "Choco pack succeeded."

        # --- Use the NUSPEC version to construct the expected path ---
        $expectedNupkgPath = "engineeringsuite.${nuspecVersion}.nupkg"
        Write-Host "Expected NUPKG path inside choco-pkg-src (using nuspec version): $expectedNupkgPath"

        # Check if the expected file exists before moving
        if (-not (Test-Path -Path $expectedNupkgPath -PathType Leaf)) {
             Write-Error "Packed file '$expectedNupkgPath' not found after choco pack!"
             Get-ChildItem -Path . # List files for debugging
             exit 1
        }

        # Move the generated nupkg back up using the nuspec version
        $nupkgName = "engineeringsuite.${nuspecVersion}.nupkg"
        Write-Host "Moving '$expectedNupkgPath' to '..\${nupkgName}'"
        Move-Item -Path $expectedNupkgPath -Destination "..\${nupkgName}" -Force
        echo "CHOCO_PKG_NAME=$nupkgName" >> $env:GITHUB_ENV # Share nupkg name
        cd .. # Go back to workspace root
        echo "Created Chocolatey package: $nupkgName"

    # Upload artifacts for ALL runs (pushes, tags, manual) for inspection/testing
    - name: Upload build artifacts (ZIP and NUPKG)
      uses: actions/upload-artifact@v4
      with:
        name: eSuite-Windows-Build-${{ env.VERSION }} # Use VERSION env var set in ZIP step
        path: |
          ${{ env.ASSET_NAME }}
          ${{ env.CHOCO_PKG_NAME }}

    # Create/Update GitHub Release ONLY for tag pushes starting with 'v'
    - name: Create/Update GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        # Upload BOTH the ZIP and the NUPKG
        files: |
          ${{ env.ASSET_NAME }}
          ${{ env.CHOCO_PKG_NAME }}
        # Optional: Set release title based on tag
        name: "Engineering Suite ${{ env.VERSION }}" # Use VERSION env var set in ZIP step
        # Optional: Mark as draft or prerelease if desired
        # draft: false
        # prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Uses the default token provided by GitHub